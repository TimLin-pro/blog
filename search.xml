<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Android 消息机制解析]]></title>
      <url>https://ivanljt.github.io/blog/blog/2017/04/28/Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>提起 Handler，相信大家都不会陌生，日常开发中不可避免地要使用到它。今天要讲的是消息机制。消息机制？咋听起来有点抽象。其实我们在使用 Handler 的时候，就使用了 Android 的消息机制。</p>
<p>从开发的角度来看，Handler 是 Android 消息机制的<strong>上层接口</strong>，这使得开发过程中只需要设计这方面的内容即可。但是作为一名合格的开发者，弄清它的实现原理是很有必要的。</p>
<ul>
<li>笔者水平有限，部分内容可能基于学习资源，当然也会有个人的一些见解加入其中。如有疏漏之处，恳请指教。</li>
</ul>
<h1 id="消息机制概述"><a href="#消息机制概述" class="headerlink" title="消息机制概述"></a>消息机制概述</h1><p>很多人认为 Handler 的作用就是更新 UI, 这种想法也没什么大问题，不过，更新 UI <strong>仅仅是 Handler 的一个特殊的使用场景</strong>。</p>
<p>我们都知道，Android 为了保持与用户交互的流畅性，不允许在主线程执行耗时操作（例如：网络请求），那我们就必须要新开一个线程去执行这些操作。任务执行完了怎么样才能更新 UI 呢？子线程是不允许更新 UI 的，这时就需要将更新的操作切换到主线程中执行。Android 中 Handler 就是这样的一个类。</p>
<p>看看官网的定义：</p>
<blockquote>
<p>A Handler allows you to send and process Message and Runnable objects associated with a thread’s MessageQueue. Each Handler instance is associated with a single thread and that thread’s message queue. When you create a new Handler, it is bound to the thread / message queue of the thread that is creating it – from that point on, it will deliver messages and runnables to that message queue and execute them as they come out of the message queue.</p>
<p>There are two main uses for a Handler: (1) to schedule messages and runnables to be executed as some point in the future; and (2) to enqueue an action to be performed on a different thread than your own.</p>
</blockquote>
<p>大意如下：Handler 允许你在一个线程的消息队列上发送和处理 Message 对象 以及 Runnable 对象。每个 Handler 实例都与一个线程以及这个线程的消息队列相关联。当一个新的 Handler 对象的时候被创建的时候，它会与创建它的那个线程上的消息队列绑定。之后，这个 handler 会把 message 和 runnable 发送到该消息队列上，并且在 message 从消息队列中出列的时处理它们。</p>
<p>Handler 有两个主要用途：</p>
<ol>
<li>指定 message 和 Runnable 在将来的某个时刻执行。</li>
<li>让某一个操作转移到另一个线程执行。</li>
</ol>
<p>看到这么一大串文字这里你可能有点晕了。先看一张图吧。</p>
<p><img src="http://img.blog.csdn.net/20150801014511416" alt=""></p>
<p>Android 消息机制示意图（参考自<a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external">网络</a>）</p>
<p>类比：</p>
<ul>
<li>Looper ==》 滚轮</li>
<li>MessageQueue ==》 流水线</li>
<li>Message ==&gt; 流水线上的产品</li>
<li>Handler ==》 扮演把『产品』送进流水线，完了以后又把『产品』取走的角色</li>
<li>Thread ==》 动力</li>
</ul>
<p>另外还有一个重要概念 ——ThreadLocal 图中没有标明出来。</p>
<p>下面对各个部分进行详细介绍。</p>
<h1 id="Android-的消息机制分析"><a href="#Android-的消息机制分析" class="headerlink" title="Android 的消息机制分析"></a>Android 的消息机制分析</h1><h2 id="ThreadLocal-简介"><a href="#ThreadLocal-简介" class="headerlink" title="ThreadLocal 简介"></a>ThreadLocal 简介</h2><p>ThreadLocal  是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储后，只有在指定线程中才能获取到存储的数据，对于其他线程来说则无法获取到数据。</p>
<p>使用场景：</p>
<ol>
<li>当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，可以考虑采用 ThrradLocal。<ul>
<li>在Android中，Looper 类就是利用了 ThreadLocal 的特性，保证每个线程只存在一个 Looper 对象。</li>
</ul>
</li>
<li>复杂逻辑下的对象传递。<ul>
<li>监听器的传递。</li>
</ul>
</li>
</ol>
<p>要想弄清楚 ThreadLocal 首先要明白它的 set() 和 get() 方法</p>
<h3 id="set-方法"><a href="#set-方法" class="headerlink" title="set 方法"></a>set 方法</h3><p>ThreadLocal 的 set 方法，大致分为 3 步：</p>
<ul>
<li>首先获取当前线程</li>
<li>利用当前线程作为句柄获取一个ThreadLocalMap的对象</li>
<li>如果上述ThreadLocalMap对象不为空，则设置值，否则创建这个ThreadLocalMap对象并设置值</li>
</ul>
<p>源码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void set(T value) &#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if (map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h3><p>当不同线程访问同一个 ThreadLocal 的 get 方法时，ThreadLocal 内部会从各自的线程中取出一个数组，然后在从数组中根据当前 ThreadLocal 的索引去查找对应的 value 值。 不同线程中的数组是不同的。</p>
<p>下面是一个利用Thread对象作为句柄获取 ThreadLocalMap 对象的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> t.threadLocals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码获取的实际上是Thread对象的threadLocals变量，可参考下面代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Thread implements Runnable &#123;</div><div class="line">    /* ThreadLocal values pertaining to this thread. This map is maintained</div><div class="line">     * by the ThreadLocal class. */</div><div class="line"></div><div class="line">    ThreadLocal.ThreadLocalMap threadLocals = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而如果一开始设置，即ThreadLocalMap对象未创建，则新建ThreadLocalMap对象，并设置初始值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void createMap(Thread t, T firstValue) &#123;</div><div class="line">    t.threadLocals = new ThreadLocalMap(this, firstValue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>[==注==]：Android  最新版实现中 ThreadLocal 使用了内部实现的一个 HashMap 以提高优化性能与 Java 中 ThreadLocal 实现有些不同，但是其中的思想并没有太大差异，感兴趣的同学可以看看 Android 中 ThreadLocal 的源码。</p>
<h3 id="ThreadLocal-小结"><a href="#ThreadLocal-小结" class="headerlink" title="ThreadLocal 小结"></a>ThreadLocal 小结</h3><p>从 ThreadLocal 的 set 和 get 方法 可以看出，它们所操作的对象都是<strong>当前线程的 localValues 对象的 table 数组</strong>，因此在不同的线程中访问同一个 ThreadLocal 的 get 和 set 方法，他们对 ThreadLocal 所做的读/写操作仅限于各自线程的内部。</p>
<h2 id="消息队列的工作原理"><a href="#消息队列的工作原理" class="headerlink" title="消息队列的工作原理"></a>消息队列的工作原理</h2><p>MessageQueue 主要包含两个操作：插入和读取（分别对应 enqueueMessage 和 next 方法）。</p>
<ul>
<li>顾名思义，enqueueMessage 的作用是往队列中插入一条信息。</li>
<li>next 的作用是从队列中取出一条信息并将其从消息队列中移除。</li>
</ul>
<p>尽管叫做消息队列，但是它的内部实现并不是用队列，而是通过一个单链表的数据结构来维护消息列表。</p>
<ul>
<li>why？ 学过数据结构的童鞋们都知道，<strong>数组查快改慢，链表查慢改快</strong>，单链表在插入和删除上比较有优势。</li>
</ul>
<p>接下来我们重点看看 enqueueMessage 方法和 next 方法。</p>
<h3 id="enqueueMessage-方法："><a href="#enqueueMessage-方法：" class="headerlink" title="enqueueMessage 方法："></a>enqueueMessage 方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">    if (msg.target == null) &#123;</div><div class="line">        // 要进入队列的消息对象的目标 handler 不能为空</div><div class="line">        throw new IllegalArgumentException(&quot;Message must have a target.&quot;);</div><div class="line">    &#125;</div><div class="line">    if (msg.isInUse()) &#123;</div><div class="line">        // 要进入队的消息不能处在使用状态</div><div class="line">        throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mQuitting) &#123;</div><div class="line">            // 要进入队的消息不能发送到一个已经「死亡」的线程上的 Handler</div><div class="line">            IllegalStateException e = new IllegalStateException(</div><div class="line">                    msg.target + &quot; sending message to a Handler on a dead thread&quot;);</div><div class="line">            Log.w(TAG, e.getMessage(), e);</div><div class="line">            msg.recycle();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        // 标记消息为使用状态；设置消息发送的时间；是否需要唤醒</div><div class="line">        msg.markInUse();</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        boolean needWake;</div><div class="line">        if (p == null || when == 0 || when &lt; p.when) &#123;</div><div class="line">            // New head, wake up the event queue if blocked.</div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; else &#123;</div><div class="line">            // Inserted within the middle of the queue.  Usually we don&apos;t have to wake</div><div class="line">            // up the event queue unless there is a barrier at the head of the queue</div><div class="line">            // and the message is the earliest asynchronous message in the queue.</div><div class="line">            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            for (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                if (p == null || when &lt; p.when) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; // invariant: p == prev.next</div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // We can assume mPtr != 0 because mQuitting is false.</div><div class="line">        if (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码中不难看出，enqueueMessaege 比较简单。它先做了一些状态判断以及一些边界检测，完了以后再进行单链表的插入操作。</p>
<h3 id="next-方法"><a href="#next-方法" class="headerlink" title="next 方法"></a>next 方法</h3><p><a href="https://gist.github.com/ivanljt/bc298eedb180e6ac67a9613814a4769f" target="_blank" rel="external">next 方法源码</a></p>
<p>部分逻辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// If first time idle, then get the number of idlers to run.</div><div class="line">// Idle handles only run if the queue is empty or if the first message</div><div class="line">// in the queue (possibly a barrier) is due to be handled in the future.</div><div class="line">if (pendingIdleHandlerCount &lt; 0</div><div class="line">        &amp;&amp; (mMessages == null || now &lt; mMessages.when)) &#123;</div><div class="line">    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">&#125;</div><div class="line">if (pendingIdleHandlerCount &lt;= 0) &#123;</div><div class="line">    // No idle handlers to run.  Loop and wait some more.</div><div class="line">    mBlocked = true;</div><div class="line">    continue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由源码可以看出 next 是一个死循环方法</p>
<ul>
<li>如果消息队列中没有消息，那么 next 会一直阻塞在那里。<ul>
<li>当队首的消息设置了延迟执行时，会造成短时间的阻塞。</li>
</ul>
</li>
<li>当有新消息到来时，next 方法会返回这条信息并将其从单链表中移除。</li>
</ul>
<h2 id="Looper-的工作原理"><a href="#Looper-的工作原理" class="headerlink" title="Looper 的工作原理"></a>Looper 的工作原理</h2><p>Looper 可以看作是一个「死循环」。它会不断地从 MessageQueue 中查看是否有新消息</p>
<ul>
<li>如果有，就立刻处理。</li>
<li>如果没有，就一直阻塞在那里。</li>
</ul>
<blockquote>
<p>Looper 是一个用来为单个线程运行消息循环的类。<strong>默认情况下线程是没有一个 Looper 跟他们相关联的</strong>。如果一个线程需要一个 looper 的话，可以通过 调用 prepare() 方法来获取。然后调用 loop 方法让它开始处理信息，一直到循环结束。</p>
<p>我们通常通过 Handler 类与 Looper 的打交道</p>
</blockquote>
<p>Looper的构造方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private Looper(boolean quitAllowed) &#123;</div><div class="line">    mQueue = new MessageQueue(quitAllowed);//创建一个消息队列</div><div class="line">    mThread = Thread.currentThread(); //把当前线程的对象保存起来</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们看到构造方法是私有的，那么 Handler 要怎么获取一个 Looper。？<br>通过 <code>Looper.prepare()</code>即可为当前线程创建一个 Looper 对象，接着通过 <code>Looper.loop()</code> 方法开启消息循环。</p>
<p>举个典型的栗子：一个的普通 Thread 如何获得 Looper？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">new Thread(&quot;OrdinaryThread&quot;)&#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        Looper.prepare();</div><div class="line">        Handler handler = new Handler();</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;.start();</div></pre></td></tr></table></figure></p>
<p>除了 <code>Looper.prepare()</code> 还有别的创建方法吗？<br>我们知道主线程（ActivityThread）是比较特殊的，Looper 给它开了小灶，专门为它提供一个 prepareMainLooper() 方法来创建 Looper。</p>
<p>我们更新 UI 的操作都需要在主线程上进行，如果有个方法可以获取主线程的 Looper 就好了。Android 系统很人性化地提供了这么一个方法——<code>Looper.getMainLooper</code>。</p>
<p>只要有了主线程的 Looper，我们就可以利用 Handler 的一个构造方法创建一个依赖于主线程的 Handler，等任务完成之后调用 Handler 的 sendMessage 或者 post 方法来更新 UI 了。</p>
<p>一个应用的小栗子；</p>
<ul>
<li>在封装的一个网络请求类中，保存一个主线程的上 Handler 当请求结果返回时，就可以通过这个 Handler 来对 UI 进行更新。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class OkHttpUtil &#123;</div><div class="line"></div><div class="line">    private static final String TAG = &quot;OkHttpUtil&quot;;</div><div class="line">    private volatile static OkHttpUtil sInstance;</div><div class="line">    private OkHttpClient mOkHttpClient;</div><div class="line">    private String mCookie;</div><div class="line">    private Handler mMainHandler;</div><div class="line"></div><div class="line">    public interface OkHttpCallBack &#123;</div><div class="line">        void onSuccess(Bundle data);</div><div class="line">        void onError(Exception e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private OkHttpUtil(Context context) &#123;</div><div class="line">        mMainHandler = new Handler(Looper.getMainLooper());</div><div class="line">        mOkHttpClient = new OkHttpClient.Builder()</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static OkHttpUtil getInstance(Context context) &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            synchronized (OkHttpUtil.class) &#123;</div><div class="line">                if (sInstance == null) &#123;</div><div class="line">                    sInstance = new OkHttpUtil(context);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void get(String url, final OkHttpCallBack callBack) &#123;</div><div class="line">        final Request request = new Request.Builder()</div><div class="line">                .url(url)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        if (mCookie != null) &#123;</div><div class="line">            request.newBuilder().addHeader(&quot;Cookie&quot;, mCookie);</div><div class="line">        &#125;</div><div class="line">        mOkHttpClient.newCall(request).enqueue(new Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void onFailure(final Call call, final IOException e) &#123;</div><div class="line">                mMainHandler.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        callBack.onError(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void onResponse(Call call, final Response response) throws IOException &#123;</div><div class="line">                String cookie = response.header(&quot;Set-Cookie&quot;);</div><div class="line">                if (cookie != null) &#123;</div><div class="line">                    setCookie(cookie);</div><div class="line">                &#125;</div><div class="line">                mMainHandler.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        Bundle bundle = new Bundle();</div><div class="line">                        bundle.putString(&quot;responseMsg&quot;,&quot;success&quot;);</div><div class="line">                        callBack.onSuccess(bundle);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>刚刚说 Looper 是一个死循环，其实是不严谨的。Looper 也是可以退出的。通过调用 Looper 的 quit 方法或者 quitSafely 方法即可。那么这二者有什么区别？</p>
<ul>
<li>调用 Looper 的 quit 方法可以<strong>直接退出</strong>Looper。</li>
<li>调用 Looper 的 quitSafely 方法只是设定了一个<strong>退出标记</strong>，然后把消息队列中<strong>已有的消息处理完才退出</strong> Looper。</li>
</ul>
<p>从 MessageQueue 的 enqueueMessage 方法可以看到，Looper 退出后，通过 Handler 发送的消息会失败，此时 Handler 的 send 方法会返回 false。</p>
<p><strong>注意！</strong>：在子线程中，如果手动为其创建了 Looper，那么在所有的任务完成之后，需要调用 quit 方法来终止消息循环，否则这个子线程就会一直处于等待状态。</p>
<h3 id="loop-方法"><a href="#loop-方法" class="headerlink" title="loop 方法"></a>loop 方法</h3><p><a href="https://gist.github.com/ivanljt/41c14e7c251c9811895b2e292d81cb44" target="_blank" rel="external">loop 方法源码</a></p>
<p>由源码可见 loop 方法是一个死循环，唯一跳出循环的方式是 MessageQueue 的 next 方法返回了 null。</p>
<p>当我们调用 Looper 的 quit 方法时，Looper 会 调用 MessageQueue 的 quit 或 quitSafely 方法来通知消息队列退出，否则 loop 方法会一直循环下去。</p>
<p>另外，代码中可以看到，loop 调用了 MessageQueue 的 next 方法来获取新消息，而 next 是一个阻塞操作，当没有消息时，next 方法会一直阻塞在那里，这也导致了 loop 方法一直阻塞在那里。</p>
<p><code>msg.target.dispatchMessage(msg);</code>// 这里的 msg.target 是发送这条信息的 Handler 对象，这样 <strong>Handler 发送的消息最终又交给它的 dispatchMessage 方法来处理</strong>了。</p>
<p>绕了这么一个大圈意义何在？<br><strong>Handler 的 dispatchMessage 方法是在创建 Handler 时所使用的 Looper 中执行的，这样就顺利地将代码切换到指定的线程中去执行了</strong>。</p>
<h2 id="Handler-的工作原理"><a href="#Handler-的工作原理" class="headerlink" title="Handler 的工作原理"></a>Handler 的工作原理</h2><p>系统之所以提供 Handler，主要是为了<strong>解决在子线程无法访问 UI 的矛盾</strong>。</p>
<p>那什么系统不允许在子线程访问 UI 呢？因为负责更新 UI 的主线程是线程不安全的（可以简单地理解为没有加同步锁）。</p>
<p>你可能会问那为什么系统不对 UI 控件的访问加上锁机制呢？</p>
<ul>
<li>如果增加了锁机制会有以下的缺点：<ul>
<li>加上锁机制会让 UI 访问的逻辑变得复杂。</li>
<li>锁机制会降低 UI 访问的效率，因为锁机制会阻塞某些线程的执行。</li>
</ul>
</li>
<li>所以，也是一种取舍。整体而言加锁的弊大于利。</li>
</ul>
<p>Handler 的工作主要包含<strong>消息的发送</strong>和<strong>接收</strong>过程。  </p>
<ul>
<li>消息的发送可以通过 post 的一系列方法以及 send 的一系列方法来实现。<ul>
<li>post 系列方法最终是通过 send 的一系列方法来实现的。</li>
</ul>
</li>
</ul>
<p>查看源码不难发现，Handler 的发送消息的过程仅仅是向消息队列插入了一条消息，MessageQueue 的 next 方法就会返回这条消息给 Looper， Looper 收到消息之后就开始处理了，最终由 Looper 交回给 Handler处理（即 handler 的 dispatchMessage 方法）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Handle system messages here.</div><div class="line"> */</div><div class="line">public void dispatchMessage(Message msg) &#123;</div><div class="line">    if (msg.callback != null) &#123;</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mCallback != null) &#123;</div><div class="line">            if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>还是开头那张图片。把前面的『消息机制概述』重新浏览一遍，说不定有新收获哦。<img src="http://img.blog.csdn.net/20150801014511416" alt=""></p>
<h2 id="学习资源推荐"><a href="#学习资源推荐" class="headerlink" title="学习资源推荐:"></a>学习资源推荐:</h2><ul>
<li><a href="http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/index.html" target="_blank" rel="external">理解 Java 中的 ThreadLocal </a></li>
<li><a href="http://blog.csdn.net/iispring/article/details/47115879" target="_blank" rel="external">Android 中 Handler 的使用</a></li>
<li><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external">深入源码解析 Android 中的 Handler,Message,MessageQueue,Looper</a></li>
<li>《<a href="https://book.douban.com/subject/26599538/" target="_blank" rel="external">Android 开发艺术探索》 (第十章 Android 的消息机制)</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
